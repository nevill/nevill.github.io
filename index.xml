<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>兵器谱 BingQiPu</title><link>https://nevill.github.io/</link><description>Recent content on 兵器谱 BingQiPu</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 11 Jan 2022 17:08:18 +0800</lastBuildDate><atom:link href="https://nevill.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>String in Go</title><link>https://nevill.github.io/posts/string-in-go/</link><pubDate>Tue, 11 Jan 2022 17:08:18 +0800</pubDate><guid>https://nevill.github.io/posts/string-in-go/</guid><description>
&lt;p>运行一个取字符串地址的程序&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">// hello.go
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="s">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">str&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="s">&amp;#34;Hello Golang!&amp;#34;&lt;/span>
&lt;span class="nx">strPtr&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">str&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;address of str = %p\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">strPtr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">byteArray&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="nb">byte&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">str&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;address of byte array = %p\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">byteArray&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Scanln&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>观察到输出&lt;/p>
&lt;pre tabindex="0">&lt;code>address of str = 0xc00008a210
address of byte array = 0xc0000ac000
&lt;/code>&lt;/pre>&lt;p>这两个地址的值并不相同。&lt;/p>
&lt;p>正好在学习使用 crash utility，可以用来观察一下内存结构&lt;/p>
&lt;pre tabindex="0">&lt;code>crash&amp;gt; rd -32 0xc00008a210 8
c00008a210: 004a3cfc 00000000 0000000d 00000000 .&amp;lt;J.............
c00008a220: 005383e0 00000000 00538420 00000000 ..S..... .S.....
crash&amp;gt; rd -a 0xc0000ac000
c0000ac000: Hello Golang!
&lt;/code>&lt;/pre>&lt;p>猜测，0xc00008c210 这个指针指向了一个字符串真正的地址，即 0x004a3cfc 才是存放的内存地址。
尝试读取一下：&lt;/p>
&lt;pre tabindex="0">&lt;code>crash&amp;gt; rd -8 0x004a3cfc 32
4a3cfc: 48 65 6c 6c 6f 20 47 6f 6c 61 6e 67 21 4d 61 73 Hello Golang!Mas
4a3d0c: 61 72 61 6d 5f 47 6f 6e 64 69 4d 65 6e 64 65 5f aram_GondiMende_
&lt;/code>&lt;/pre>&lt;p>果然找到了。&lt;/p>
&lt;p>翻一下代码，有一个 stringStruct&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">// runtime/string.go
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">type&lt;/span> &lt;span class="nx">stringStruct&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">str&lt;/span> &lt;span class="nx">unsafe&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Pointer&lt;/span>
&lt;span class="nx">len&lt;/span> &lt;span class="kt">int&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>同时，观察到 0xc00008a218 这个地址的值 0x0000000d 即 &lt;code>Hello Golang!&lt;/code> 字符串的长度 13。即验证了 0xc00008a210 这个地址对应的结构体。
那么通过 &lt;code>[]byte(str)&lt;/code> 强制转换以后为什么会返回另外一个内存地址 0xc0000ac000 而没有返回 0x004a3cfc 呢？
原因也很简单， string 类型应该是不可修改的 (immutable)[^1]，也无法通过 &lt;code>&amp;amp;str[i]&lt;/code> 来获取其某一个 byte 的地址。&lt;/p>
&lt;p>可以查看一下汇编：&lt;/p>
&lt;pre tabindex="0">&lt;code>// go tool compile -S hello.go
// ...
0x0085 00133 (hello.go:11) MOVQ &amp;quot;&amp;quot;.&amp;amp;str+56(SP), CX
0x008a 00138 (hello.go:11) MOVQ (CX), BX
0x008d 00141 (hello.go:11) MOVQ 8(CX), CX
0x0091 00145 (hello.go:11) XORL AX, AX
0x0093 00147 (hello.go:11) PCDATA $1, $0
0x0093 00147 (hello.go:11) CALL runtime.stringtoslicebyte(SB)
0x0098 00152 (hello.go:12) CALL runtime.convTslice(SB)
0x009d 00157 (hello.go:12) MOVUPS X15, &amp;quot;&amp;quot;..autotmp_29+64(SP)
0x00a3 00163 (hello.go:12) LEAQ type.[]uint8(SB), CX
0x00aa 00170 (hello.go:12) MOVQ CX, &amp;quot;&amp;quot;..autotmp_29+64(SP)
0x00af 00175 (hello.go:12) MOVQ AX, &amp;quot;&amp;quot;..autotmp_29+72(SP)
// ...
&lt;/code>&lt;/pre>&lt;p>这里调用了一个 runtime.stringtoslicebyte&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">func&lt;/span> &lt;span class="nf">stringtoslicebyte&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">buf&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">tmpBuf&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">s&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">byte&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">b&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">byte&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">buf&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">s&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">buf&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="nx">buf&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">tmpBuf&lt;/span>&lt;span class="p">{}&lt;/span>
&lt;span class="nx">b&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">buf&lt;/span>&lt;span class="p">[:&lt;/span>&lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">s&lt;/span>&lt;span class="p">)]&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">b&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nf">rawbyteslice&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">s&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nb">copy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">b&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以看到，最后会调用 &lt;code>copy&lt;/code> 将源内容复制到一个新的 &lt;code>[]byte&lt;/code> 切片中。&lt;/p>
&lt;p>总结一下：&lt;/p>
&lt;ol>
&lt;li>string 类型结构仅含两个元素，一个指向具体内容的指针和字符串长度&lt;/li>
&lt;li>string 类型是不可修改的，所以在强制转换类型的时候发生了复制&lt;/li>
&lt;li>写这篇主要目的是展示 crash utility 怎么用 :)&lt;/li>
&lt;/ol>
&lt;p>参考：
[^1] &lt;a href="https://go.dev/ref/spec#String_types">https://go.dev/ref/spec#String_types&lt;/a>&lt;/p></description></item><item><title>Using Lima as Docker Destkop Alternative</title><link>https://nevill.github.io/posts/using-lima-as-docker-destkop-alternative/</link><pubDate>Mon, 29 Nov 2021 13:05:34 +0800</pubDate><guid>https://nevill.github.io/posts/using-lima-as-docker-destkop-alternative/</guid><description>
&lt;p>随着 Docker Desktop 越来越笨重，我现在已经用 Lima 完全来替换掉它。&lt;/p>
&lt;h2 id="介绍">
&lt;a href="#%e4%bb%8b%e7%bb%8d" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
介绍
&lt;/h2>
&lt;p>&lt;a href="https://github.com/lima-vm/lima">Lima&lt;/a> 是一个在 macOS 上运行虚拟化 Linux 系统的工具。
官方称可以把 Lima 理解为 &amp;ldquo;macOS subsystem for Linux&amp;rdquo; 或者 &amp;ldquo;containerd for Mac&amp;rdquo;。&lt;/p>
&lt;h2 id="安装">
&lt;a href="#%e5%ae%89%e8%a3%85" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
安装
&lt;/h2>
&lt;ol>
&lt;li>在 macOS 主机上最简单的方式是通过 Homebrew 安装&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">brew install lima
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>我比较喜欢自己构建，会自己手动构建 qemu 以后放在 $HOME/.local 下&lt;/p>
&lt;/blockquote>
&lt;ol start="2">
&lt;li>启动虚拟机&lt;/li>
&lt;/ol>
&lt;p>创建一个 &lt;code>default.yaml&lt;/code>，内容如下（根据自己主机的情况调整 memory 和 disk 大小）&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">cpus&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">2&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">memory&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;10GiB&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">disk&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;100GiB&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">images&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">location&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;https://cloud-images.ubuntu.com/impish/current/impish-server-cloudimg-amd64.img&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">arch&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;x86_64&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">mounts&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">location&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;~&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">writable&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">location&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;/tmp/lima&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">writable&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">ssh&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">localPort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">60006&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">containerd&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">system&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">user&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">portForwards&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">guestSocket&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;/run/user/{{.UID}}/docker.sock&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">hostSocket&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;{{.Home}}/opt/docker/docker.sock&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="3">
&lt;li>执行 &lt;code>limactl start ./default.yaml&lt;/code> 启动虚拟机&lt;/li>
&lt;/ol>
&lt;p>可以通过 &lt;code>ps -ef&lt;/code> 看到&lt;/p>
&lt;pre tabindex="0">&lt;code>501 1589 1577 0 Sun07PM ttys001 1847:13.31 /usr/local/bin/qemu-system-x86_64 -cpu host -machine q35,accel=hvf -smp 2,sockets=1,cores=2,threads=1 -m 10240 -drive if=pflash,format=raw,readonly=on,file=/usr/local/share/qemu/edk2-x86_64-code.fd -boot order=c,splash-time=0,menu=on -drive file=/Users/nevill/.lima/default/diffdisk,if=virtio -cdrom /Users/nevill/.lima/default/cidata.iso -netdev user,id=net0,net=192.168.5.0/24,dhcpstart=192.168.5.15,hostfwd=tcp:127.0.0.1:60006-:22 -device virtio-net-pci,netdev=net0,mac=52:55:55:63:06:20 -device virtio-rng-pci -display none -device virtio-vga -device virtio-keyboard-pci -device virtio-mouse-pci -parallel none -chardev socket,id=char-serial,path=/Users/nevill/.lima/default/serial.sock,server=on,wait=off,logfile=/Users/nevill/.lima/default/serial.log -serial chardev:char-serial -chardev socket,id=char-qmp,path=/Users/nevill/.lima/default/qmp.sock,server=on,wait=off -qmp chardev:char-qmp -name lima-default -pidfile /Users/nevill/.lima/default/qemu.pid
501 1643 1 0 Sun07PM ?? 0:00.89 ssh: /Users/nevill/.lima/default/ssh.sock [mux]
501 1649 1577 0 Sun07PM ttys001 0:00.01 ssh -F /dev/null -o IdentityFile=&amp;quot;/Users/nevill/.lima/_config/user&amp;quot; -o IdentityFile=&amp;quot;/Users/nevill/.ssh/google_compute_engine&amp;quot; -o IdentityFile=&amp;quot;/Users/nevill/.ssh/id_rsa&amp;quot; -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o NoHostAuthenticationForLocalhost=yes -o GSSAPIAuthentication=no -o PreferredAuthentications=publickey -o Compression=no -o BatchMode=yes -o IdentitiesOnly=yes -o Ciphers=&amp;quot;^aes128-gcm@openssh.com,aes256-gcm@openssh.com&amp;quot; -o User=nevill -o ControlMaster=auto -o ControlPath=&amp;quot;/Users/nevill/.lima/default/ssh.sock&amp;quot; -o ControlPersist=5m -p 60006 127.0.0.1 -- sshfs :/Users/nevill /Users/nevill -o slave -o ro -o allow_other
501 1652 1577 0 Sun07PM ttys001 0:00.01 ssh -F /dev/null -o IdentityFile=&amp;quot;/Users/nevill/.lima/_config/user&amp;quot; -o IdentityFile=&amp;quot;/Users/nevill/.ssh/google_compute_engine&amp;quot; -o IdentityFile=&amp;quot;/Users/nevill/.ssh/id_rsa&amp;quot; -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o NoHostAuthenticationForLocalhost=yes -o GSSAPIAuthentication=no -o PreferredAuthentications=publickey -o Compression=no -o BatchMode=yes -o IdentitiesOnly=yes -o Ciphers=&amp;quot;^aes128-gcm@openssh.com,aes256-gcm@openssh.com&amp;quot; -o User=nevill -o ControlMaster=auto -o ControlPath=&amp;quot;/Users/nevill/.lima/default/ssh.sock&amp;quot; -o ControlPersist=5m -p 60006 127.0.0.1 -- sshfs :/tmp/lima /tmp/lima -o slave -o allow_other
501 1662 1660 0 Sun07PM ttys001 0:00.01 /usr/bin/ssh -F /dev/null -o IdentityFile=&amp;quot;/Users/nevill/.lima/_config/user&amp;quot; -o IdentityFile=&amp;quot;/Users/nevill/.ssh/google_compute_engine&amp;quot; -o IdentityFile=&amp;quot;/Users/nevill/.ssh/id_rsa&amp;quot; -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o NoHostAuthenticationForLocalhost=yes -o GSSAPIAuthentication=no -o PreferredAuthentications=publickey -o Compression=no -o BatchMode=yes -o IdentitiesOnly=yes -o Ciphers=&amp;quot;^aes128-gcm@openssh.com,aes256-gcm@openssh.com&amp;quot; -o User=nevill -o ControlMaster=auto -o ControlPath=&amp;quot;/Users/nevill/.lima/default/ssh.sock&amp;quot; -o ControlPersist=5m -t -q -p 60006 127.0.0.1 -- cd &amp;quot;/Users/nevill&amp;quot; || cd &amp;quot;/Users/nevill&amp;quot; ; exec bash --login
&lt;/code>&lt;/pre>&lt;p>注意到 qemu 进程的存在，还有一些 ssh 进程用来转发端口。&lt;/p>
&lt;p>运行 &lt;code>lima&lt;/code> 即可进入虚拟机访问。&lt;/p>
&lt;h2 id="安装并使用-docker">
&lt;a href="#%e5%ae%89%e8%a3%85%e5%b9%b6%e4%bd%bf%e7%94%a8-docker" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
安装并使用 Docker
&lt;/h2>
&lt;ol>
&lt;li>在虚拟机里面安装 rootless docker [2]&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">$ lima
nevill@lima-default:/Users/nevill$ curl -fsSL https://get.docker.com/rootless &lt;span class="p">|&lt;/span> sh
&lt;span class="c1"># 启动 docker 服务&lt;/span>
nevill@lima-default:/Users/nevill$ systemctl --user daemon-reload
nevill@lima-default:/Users/nevill$ systemctl --user restart docker
&lt;span class="c1"># 虚拟机启动的时候启动容器服务&lt;/span>
nevill@lima-default:/Users/nevill$ sudo loginctl enable-linger &lt;span class="k">$(&lt;/span>whoami&lt;span class="k">)&lt;/span>
&lt;span class="c1"># 确定 docker 正常运行&lt;/span>
nevill@lima-default:/Users/nevill$ docker info
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>在主机环境中使用 docker&lt;/li>
&lt;/ol>
&lt;p>安装 &lt;a href="https://download.docker.com/mac/static/stable/x86_64/docker-20.10.9.tgz">docker cli&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>nerdctl 当前还不能完全取代 docker-cli [1]。 至少需要等 kind 能够通过 nerdctl 正常启动我才会替换，目前依然使用 docker-cli 来进行容器、镜像的相关操作。&lt;/p>
&lt;/blockquote>
&lt;p>运行 &lt;code>DOCKER_HOST=unix:///Users/nevill/opt/docker/docker.sock docker info&lt;/code> 看是否能成功返回结果。&lt;/p>
&lt;p>如果成功可以执行 &lt;code>docker context create lima-default --docker &amp;quot;host=unix:///Users/nevill/opt/docker/docker.sock&amp;quot;&lt;/code> 来保存。&lt;/p>
&lt;h2 id="同-docker-的兼容性">
&lt;a href="#%e5%90%8c-docker-%e7%9a%84%e5%85%bc%e5%ae%b9%e6%80%a7" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
同 Docker 的兼容性
&lt;/h2>
&lt;p>Lima 会将主机的 $HOME 目录完全映射到虚拟机中，因此在主机的 $HOME 下执行类似 &lt;code>docker run -v $PWD:/somedir&lt;/code> 的命令是完全可以正常工作的。&lt;/p>
&lt;h2 id="reference">
&lt;a href="#reference" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Reference
&lt;/h2>
&lt;ol>
&lt;li>&lt;a href="https://github.com/containerd/nerdctl/issues/349">https://github.com/containerd/nerdctl/issues/349&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://rootlesscontaine.rs/getting-started/docker/">https://rootlesscontaine.rs/getting-started/docker/&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>Kubernetes POD IP</title><link>https://nevill.github.io/posts/k8s-hostnetwork-pod-ip/</link><pubDate>Fri, 15 Oct 2021 12:48:08 +0800</pubDate><guid>https://nevill.github.io/posts/k8s-hostnetwork-pod-ip/</guid><description>
&lt;p>最近在本地尝试&lt;a href="https://github.com/nevill/learn-k8s">Kubernetes 集群的搭建&lt;/a>。&lt;/p>
&lt;p>一个主机有两张网卡，在安装完集群以后，发现 Pod 里分配的 IP 全部都是主机第一张网卡的 IP。
而这个环境是 Vagrant + Virtualbox 安装，第一张网卡的 IP 地址也都是固定的。&lt;/p>
&lt;p>&lt;img loading="lazy"
src="https://nevill.github.io/posts/k8s-hostnetwork-pod-ip/images/pod-with-same-ip-addr.png"
alt="Pods with same IP"
width=2172
height="596" />&lt;/p>
&lt;p>开始找解决方案。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>想到 Pod 的网络是通过 cni 来分配的，也许可以通过改 cni 配置来实现。翻看了半天 cni 的资料，尝试了一下没有成功，以后要加强 cni 的学习。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>回头看这个图的时候，忽然发现有些 Pod 是能成功分配 IP 的，而那些分配到了相同 IP 的 Pod 在 Spec 定义里都有一个 &lt;code>hostNetwork: true&lt;/code>。 确实，&lt;code>10.0.2.15&lt;/code> 这个 IP 就是主机第一张网卡上的。翻看 k8s 源代码，发现有 hostNetwork 属性的 Pod 在确定其 IP 时，就是读取所在 node 上的 IP 地址 [1]。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Node 节点的信息都由 Kubelet 控制，因此，怎么取 node IP 的过程跟 cni 没关系，而是直接从 Spec 中读取。
而 Spec 中 status.address 是从主机上按照网卡顺序取 IP，或者，通过 &amp;ndash;node-ip 这个参数指定。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>所以最终的解决方法就是在 kubelet 启动的参数中指定 node-ip 这个参数即可。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>这么做也有问题，比如这个 IP 地址是动态分配的怎么办？看到有 Issue 讨论 AWS 可以通过 API 解析域名的方式来获取 IP，这些功能是跟厂商绑定的了。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="参考">
&lt;a href="#%e5%8f%82%e8%80%83" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
参考
&lt;/h2>
&lt;p>[1] pkg/kubelet/kubelet_pods.go : &lt;code>func (kl *Kubelet) generateAPIPodStatus(pod *v1.Pod, podStatus *kubecontainer.PodStatus) v1.PodStatus&lt;/code>&lt;/p></description></item></channel></rss>